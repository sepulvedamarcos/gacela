' Gambas class file

' Gambas class file - SQLiteContext para Gacela
' Maneja la conexión y esquema de la base de datos SQLite

Public Const SCHEMA_VERSION As Integer = 1

Private $db As Connection
Private $log4gambas As Log4Gambas3
Private $configuration As Configuration
Private $dbName As String
Private $dbLibraryDirectory As String
Private $type As String

' Property para acceso a la conexión
Property Read DBConnection As Connection

' Constructor que recibe la ruta completa y el log4gambas
Public Sub _new(configuration As Configuration, log4gambas As Log4Gambas3)

  $log4gambas = log4gambas
  $configuration = configuration

  $dbLibraryDirectory = $configuration.GetLibraryDirectory()
  $dbName = $configuration.getDatabaseName()
  $type = $configuration.GetDBType()

  $log4gambas.Info("Inicializando contexto de base de datos SQLite")
  $log4gambas.Debug("Ruta de base de datos: " & $dbLibraryDirectory)
  $log4gambas.Debug("nombre base de datos: " & $dbName)
  $log4gambas.Debug("Tipo base de datos: " & $type)

  InitializeDatabase()

End

' Inicializa la base de datos (crear si no existe, conectar)
Public Sub InitializeDatabase()

  $log4gambas.Info("Estableciendo conexión a la base de datos Gacela")

  ' 1. Verificar si la base de datos ya existe
  If Not Exist($dbLibraryDirectory &/ $dbName) Then
    $log4gambas.Warning("El archivo de base de datos no existe. Envia a crear: " & $dbLibraryDirectory &/ $dbName)
    CreateDatabase()
  Endif

  'TODO: hacer chequeo previo de existencia de tablas

  '3. Abrir la conexión a la base de datos
  Try ConnectDatabase()
  If Error Then ERROR.Propagate

  $log4gambas.Info("Conexión a la base de datos establecida correctamente")

End

' Crea la base de datos física usando el patrón nativo de Gambas
Private Sub CreateDatabase()

  'Crear conexión temporal para crear la BD
  $db = New Connection
  $db.Type = $type
  $db.Host = $dbLibraryDirectory
  $db.Name = "" 'Liberamos el nombre para poder crear la BD física

  $db.Open()
  If Error Then
    $log4gambas.Fatal("No se puede abrir conexión para crear BD: " & Error.Text)
    ERROR.Propagate
  Endif

  'Ya sabemos que el archivo de base de datos no existe, aqui preguntamos via connect
  If Not $db.Databases.Exist($dbName) Then
    'aqui ocurre la magia, se crea la base de datos
    $db.Databases.Add($dbName)
    Wait 0.05 ' Pequeña pausa para asegurar creación fisica del archivo
    If Error Then
      $log4gambas.Fatal("No se puede crear base de datos: " & Error.Text)
      $db.Close()
      ERROR.Propagate
    Endif
  Endif
  ' cerramos la conexion para asegurar soltar la conexion y ahora usar el nombre
  $db.Close()

  ' Reconectar con el nombre de la BD y crear esquema
  $db.Name = $dbName
  ' Volvemos a conectarnos
  $db.Open()
  If Error Then
    $log4gambas.Fatal("No se puede reabrir BD recién creada: " & Error.Text)
    ERROR.Propagate
  Endif

  $log4gambas.Warning("Creando esquema de tablas para Gacela")

  ' Crear todas las tablas usando el método nativo de Gambas
  Try CreatePhotosTable()
  If Error Then ERROR.Propagate

  Try CreateAlbumsTable()
  If Error Then ERROR.Propagate

  Try CreatePhotosAlbumsTable()
  If Error Then ERROR.Propagate

  Try CreateTagsTable()
  If Error Then ERROR.Propagate

  Try CreatePhotosTagsTable()
  If Error Then ERROR.Propagate

  Try InsertSeedData()
  If Error Then ERROR.Propagate

  $db.Close()
  $log4gambas.Info("Base de datos creada exitosamente")

End

' Conecta a la base de datos existente
Private Sub ConnectDatabase()

  $db = New Connection
  $db.Type = $type
  $db.Host = $dbLibraryDirectory
  $db.Name = $dbName

  Try $db.Open()

  If Error Then
    $log4gambas.Fatal("No se pudo conectar a la base de datos: " & Error.Text)
    ERROR.Propagate
  Endif

  $log4gambas.Debug("Conexión establecida con: " & $dbLibraryDirectory &/ $dbName)

End

' Crea tabla principal de fotos usando método nativo - NUEVA ESTRUCTURA CON BLOBS
Private Sub CreatePhotosTable()

  Dim table As Table

  table = $db.Tables.Add($configuration.TABLE_PHOTOS)
  table.Fields.Add("id", db.Long)                         ' identificador del registro
  table.Fields.Add("file_name", db.String, 255)           ' Nombre original del archivo
  table.Fields.Add("md5_hash", db.String, 32)             ' Hash MD5 único
  table.Fields.Add("original_size", db.Long)              ' Tamaño original en bytes
  table.Fields.Add("compressed_size", db.Long)            ' Tamaño después de compresión
  table.Fields.Add("width_pixels", db.Integer)            ' Ancho en píxeles
  table.Fields.Add("height_pixels", db.Integer)           ' Alto en píxeles
  table.Fields.Add("original_format", db.String, 10)      ' Formato original (jpg, png, etc)
  table.Fields.Add("creation_date", db.Date)              ' Fecha de creación de la foto
  table.Fields.Add("import_date", db.Date)                ' Fecha de importación a Gacela
  table.Fields.Add("description", db.String)              ' Descripción de la foto
  table.Fields.Add("is_favorite", db.Boolean)             ' Marcada como favorita
  table.Fields.Add("import_user", db.String, 50)          ' Usuario que la importó
  table.Fields.Add("soft_delete", db.Boolean)             ' Soft delete
  table.Fields.Add("compressed_photo", db.Blob)           ' ← FOTO COMPRIMIDA (BLOB)
  table.Fields.Add("thumbnail", db.Blob)                  ' ← MINIATURA (BLOB)
  table.Fields.Add("compression_level", db.Integer)       ' Nivel de compresión aplicado
  table.Fields.Add("last_sync_date", db.Date)             ' Fecha de ultima sincronizacion a Gacela (para futura sync con nube)
  table.PrimaryKey = ["id"]
  table.Update()

  $log4gambas.Debug("Tabla '" & $configuration.TABLE_PHOTOS & "' creada")

End

' Crea tabla de álbumes
Private Sub CreateAlbumsTable()

  Dim table As Table

  table = $db.Tables.Add($configuration.TABLE_ALBUMS)
  table.Fields.Add("id", db.Integer)                      ' Identificador del registro
  table.Fields.Add("name", db.String, 255)                ' Nombre corto para el album
  table.Fields.Add("description", db.String)              ' Descripcion identificadora del album
  table.Fields.Add("creation_date", db.Date)              ' Fecha de creación del album
  table.Fields.Add("creation_user", db.String, 50)        ' Usuario que creo el album
  table.Fields.Add("thumbnail", db.Blob)                  ' ← MINIATURA (BLOB)
  table.Fields.Add("soft_delete", db.Boolean)             ' Soft delete
  table.PrimaryKey = ["id"]
  table.Update()

  $log4gambas.Debug("Tabla '" & $configuration.TABLE_ALBUMS & "' creada")

End

' Crea tabla de relación fotos-álbumes
Private Sub CreatePhotosAlbumsTable()

  Dim table As Table

  table = $db.Tables.Add($configuration.TABLE_PHOTOS_ALBUMS)
  table.Fields.Add("id", db.Integer)                      ' Identificador del registro
  table.Fields.Add("photo_id", db.Integer)                ' Identificador de foto asociada
  table.Fields.Add("album_id", db.Integer)                ' Identificador de album asociado
  table.Fields.Add("order_in_album", db.Integer)          ' Indicador de orden de la foto dentro del album
  table.Fields.Add("added_date", db.Date)                 ' Fecha de agregación al album
  table.Fields.Add("added_user", db.String, 50)           ' Usuario que agrego la relacion
  table.PrimaryKey = ["id"]
  table.Update()

  $log4gambas.Debug("Tabla '" & $configuration.TABLE_PHOTOS_ALBUMS & "' creada")

End

' Crea tabla de tags/etiquetas
Private Sub CreateTagsTable()

  Dim table As Table

  table = $db.Tables.Add($configuration.TABLE_TAGS)
  table.Fields.Add("id", db.Integer)                    ' Identificador del registro
  table.Fields.Add("name", db.String, 100)              ' Nombre del tag
  table.Fields.Add("description", db.String)            ' Descripcion del tag
  table.Fields.Add("color", db.String, 7)               ' Color de despliegue del tag
  table.Fields.Add("creation_date", db.Date)            ' Fecha de creación
  table.Fields.Add("creation_user", db.String, 50)      ' Usuario que creo el tag
  table.PrimaryKey = ["id"]
  table.Update()

  $log4gambas.Debug("Tabla '" & $configuration.TABLE_TAGS & "' creada")

End

' Crea tabla de relación fotos-tags
Private Sub CreatePhotosTagsTable()

  Dim table As Table

  table = $db.Tables.Add($configuration.TABLE_PHOTOS_TAGS)
  table.Fields.Add("id", db.Integer)                    ' Identificador del registro
  table.Fields.Add("photo_id", db.Integer)              ' Identificador de foto relacionada
  table.Fields.Add("tag_id", db.Integer)                ' Identificador de tag relacionado
  table.Fields.Add("added_date", db.Date)               ' Fecha de agregacion
  table.Fields.Add("added_user", db.String, 50)         ' Usuario que agrego la relacion
  table.PrimaryKey = ["id"]
  table.Update()

  $log4gambas.Debug("Tabla '" & $configuration.TABLE_PHOTOS_TAGS & "' creada")

End

' Crea una clave única basada en timestamp Unix (como tu ejemplo)
Private Function CreateKey() As Long

  Dim currentDate As Date
  Dim elapsedTime As Long

  ' Crear timestamp Unix actual
  currentDate = Now()
  elapsedTime = DateDiff("1/1/1970", currentDate, gb.Second)
  $log4gambas.Debug("Nueva clave generada: " & elapsedTime)

  Return elapsedTime

End

' Método para obtener estadísticas básicas
Public Function CountPhotos() As Integer

  Dim result As Result
  Dim total As Integer = 0
  '
  '   Try
  '   result = $db.Exec("SELECT COUNT(*) as total FROM " & Constants.TABLE_PHOTOS & " WHERE active = ?", True)
  '   If result.Available Then
  '     total = result["total"]
  '   Endif
  ' Catch
  '   $logger.Error("Error contando fotos: " & Error.Text)
  '   End Try

  Return total

End

' Property para acceder a la conexión
Function DBConnection_Read() As Connection

  Return $db

End

' Método para cerrar conexión
Public Sub CloseConnection()

  If $db And $db.Opened Then
    Try $db.Close()
    $log4gambas.Info("Conexión a base de datos cerrada")
  Endif

End

' Destructor
Public Sub _free()

  CloseConnection()

End

' Método para insertar datos de prueba en la tabla photos
Private Sub InsertSeedData()

  $log4gambas.Info("Insertando datos de prueba en tabla photos...")

  Try InsertDummyPhoto1()
  If Error Then
    $log4gambas.Error("Error insertando foto de prueba 1: " & Error.Text)
  Endif
  Wait 1
  Try InsertDummyPhoto2()
  If Error Then
    $log4gambas.Error("Error insertando foto de prueba 2: " & Error.Text)
  Endif

  $log4gambas.Info("Datos de prueba insertados exitosamente")

End

' Inserta primera foto de prueba (imagen roja)
Private Sub InsertDummyPhoto1()

  Dim result As Result
  Dim dummyImage As Image
  Dim dummyThumbnail As Image
  Dim compressedPhoto As Byte[]
  Dim thumbnail As Byte[]

  ' Crear imagen dummy de 100x100 roja
  dummyImage = New Image(100, 100, Color.Red)

  ' Crear thumbnail dummy de 50x50 roja
  dummyThumbnail = New Image(50, 50, Color.Red)

  ' Convertir a bytes (JPEG)
  ' compressedPhoto = ImageToBytes(dummyImage, 85)
  ' thumbnail = ImageToBytes(dummyThumbnail, 80)

  ' Insertar registro usando método nativo
  result = $db.Create($configuration.TABLE_PHOTOS)
  result["id"] = CreateKey()
  result["file_name"] = "foto_prueba_1.jpg"
  result["md5_hash"] = "a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6"
  result["original_size"] = 15000
  result["compressed_size"] = 1
  result["width_pixels"] = 100
  result["height_pixels"] = 100
  result["original_format"] = "jpg"
  result["creation_date"] = DateAdd(Now(), gb.Day, -30) ' Hace 30 días
  result["import_date"] = Now()
  result["description"] = "Foto de prueba 1 - Imagen roja de demostración"
  result["is_favorite"] = True
  result["import_user"] = User.Name
  result["soft_delete"] = False
  ' result["compressed_photo"] =
  ' result["thumbnail"] = Null
  result["compression_level"] = 85
  result["last_sync_date"] = Now()
  result.Update()

  $log4gambas.Debug("Foto de prueba 1 insertada con ID: " & result["id"])

End

' Inserta segunda foto de prueba (imagen azul)
Private Sub InsertDummyPhoto2()

  Dim result As Result
  Dim dummyImage As Image
  Dim dummyThumbnail As Image
  Dim compressedPhoto As Byte[]
  Dim thumbnail As Byte[]

  ' Crear imagen dummy de 150x150 azul
  dummyImage = New Image(150, 150, Color.Blue)

  ' Crear thumbnail dummy de 50x50 azul
  dummyThumbnail = New Image(50, 50, Color.Blue)

  ' Convertir a bytes (JPEG)
  ' compressedPhoto = ImageToBytes(dummyImage, 85)
  ' thumbnail = ImageToBytes(dummyThumbnail, 80)

  ' Insertar registro usando método nativo
  result = $db.Create($configuration.TABLE_PHOTOS)
  result["id"] = CreateKey()
  result["file_name"] = "foto_prueba_2.jpg"
  result["md5_hash"] = "z9y8x7w6v5u4t3s2r1q0p9o8n7m6l5k4"
  result["original_size"] = 22000
  result["compressed_size"] = Null
  result["width_pixels"] = 150
  result["height_pixels"] = 150
  result["original_format"] = "jpg"
  result["creation_date"] = DateAdd(Now(), gb.Day, -15) ' Hace 15 días
  result["import_date"] = Now()
  result["description"] = "Foto de prueba 2 - Imagen azul de demostración"
  result["is_favorite"] = False
  result["import_user"] = User.Name
  result["soft_delete"] = False
  result["compressed_photo"] = Null
  result["thumbnail"] = Null
  result["compression_level"] = 85
  result["last_sync_date"] = Now()
  result.Update()

  $log4gambas.Debug("Foto de prueba 2 insertada con ID: " & result["id"])

End

' Función auxiliar para convertir Image a Bytes (JPEG)
Private Function ImageToBytes(img As Image, quality As Integer) As Byte[]

  Dim im As ImageView
  Dim tempFile As String
  Dim imageBytes As Byte[]
  Dim hFile As File

  ' Crear archivo temporal
  'tempFile = Temp() & ".jpg"
  tempFile = "/home/marcos/Desarrollo/4139948.png"

  ' Abrir el archivo en modo binario
  im = New ImageView(tempFile)

  ' Limpiar archivo temporal
  Try Kill tempFile

  Return imageBytes

Catch
  ' Limpiar en caso de error
  ' Try Kill tempFile
  $log4gambas.Error("Error convirtiendo imagen a bytes: " & Error.Text)
  Return Null

End
