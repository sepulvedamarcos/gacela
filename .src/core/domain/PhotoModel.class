' Gambas class file

' Gambas class file - PhotoModel
' Modelo de dominio para representar una foto en Gacela

' Propiedades privadas del modelo
Private $id As Integer = 0
Private $fileName As String = ""
Private $md5Hash As String = ""
Private $originalSize As Long = 0
Private $compressedSize As Long = 0
Private $widthPixels As Integer = 0
Private $heightPixels As Integer = 0
Private $originalFormat As String = ""
Private $creationDate As Date
Private $importDate As Date
Private $description As String = ""
Private $isFavorite As Boolean = False
Private $importUser As String = ""
Private $active As Boolean = True
Private $compressedPhoto As Byte[]
Private $thumbnail As Byte[]
Private $compressionLevel As Integer = 0

' Constructor único
Public Sub _new(Optional fileName As String = "", Optional md5Hash As String = "", Optional originalSize As Long = 0)

  ' Inicializar fechas por defecto
  $importDate = Now()
  $importUser = System.User.Name

  ' Asignar parámetros si se proporcionan
  If fileName <> "" Then $fileName = fileName
  If md5Hash <> "" Then $md5Hash = md5Hash
  If originalSize > 0 Then $originalSize = originalSize

End

' === PROPIEDADES PÚBLICAS ===

' ID único de la foto
Property Id As Integer

Function Id_Read() As Integer

  Return $id

End

Sub Id_Write(value As Integer)

  $id = value

End

' Nombre del archivo original
Property FileName As String

Function FileName_Read() As String

  Return $fileName

End

Sub FileName_Write(value As String)

  $fileName = value

End

' Hash MD5 único
Property MD5Hash As String

Function MD5Hash_Read() As String

  Return $md5Hash

End

Sub MD5Hash_Write(value As String)

  $md5Hash = value

End

' Tamaño original en bytes
Property OriginalSize As Long

Function OriginalSize_Read() As Long

  Return $originalSize

End

Sub OriginalSize_Write(value As Long)

  $originalSize = value

End

' Tamaño después de compresión en bytes
Property CompressedSize As Long

Function CompressedSize_Read() As Long

  Return $compressedSize

End

Sub CompressedSize_Write(value As Long)

  $compressedSize = value

End

' Ancho en píxeles
Property WidthPixels As Integer

Function WidthPixels_Read() As Integer

  Return $widthPixels

End

Sub WidthPixels_Write(value As Integer)

  $widthPixels = value

End

' Alto en píxeles
Property HeightPixels As Integer

Function HeightPixels_Read() As Integer

  Return $heightPixels

End

Sub HeightPixels_Write(value As Integer)

  $heightPixels = value

End

' Formato original (jpg, png, etc)
Property OriginalFormat As String

Function OriginalFormat_Read() As String

  Return $originalFormat

End

Sub OriginalFormat_Write(value As String)

  $originalFormat = LCase(value)

End

' Fecha de creación de la foto (desde metadatos EXIF)
Property CreationDate As Date

Function CreationDate_Read() As Date

  Return $creationDate

End

Sub CreationDate_Write(value As Date)

  $creationDate = value

End

' Fecha de importación a Gacela
Property ImportDate As Date

Function ImportDate_Read() As Date

  Return $importDate

End

Sub ImportDate_Write(value As Date)

  $importDate = value

End

' Descripción de la foto
Property Description As String

Function Description_Read() As String

  Return $description

End

Sub Description_Write(value As String)

  $description = value

End

' Marcada como favorita
Property IsFavorite As Boolean

Function IsFavorite_Read() As Boolean

  Return $isFavorite

End

Sub IsFavorite_Write(value As Boolean)

  $isFavorite = value

End

' Usuario que importó la foto
Property ImportUser As String

Function ImportUser_Read() As String

  Return $importUser

End

Sub ImportUser_Write(value As String)

  $importUser = value

End

' Estado activo (soft delete)
Property Active As Boolean

Function Active_Read() As Boolean

  Return $active

End

Sub Active_Write(value As Boolean)

  $active = value

End

' Foto comprimida como array de bytes
Property CompressedPhoto As Byte[]

Function CompressedPhoto_Read() As Byte[]

  Return $compressedPhoto

End

Sub CompressedPhoto_Write(value As Byte[])

  $compressedPhoto = value
  If $compressedPhoto Then
    $compressedSize = $compressedPhoto.Length
  Endif

End

' Miniatura como array de bytes
Property Thumbnail As Byte[]

Function Thumbnail_Read() As Byte[]

  Return $thumbnail

End

Sub Thumbnail_Write(value As Byte[])

  $thumbnail = value

End

' Nivel de compresión aplicado (1-100)
Property CompressionLevel As Integer

Function CompressionLevel_Read() As Integer

  Return $compressionLevel

End

Sub CompressionLevel_Write(value As Integer)

  If value >= 1 And value <= 100 Then
    $compressionLevel = value
  Endif

End

' === PROPIEDADES DE SOLO LECTURA ===

' Obtiene el ratio de compresión
Property Read CompressionRatio As Float

Function CompressionRatio_Read() As Float

  If $originalSize > 0 And $compressedSize > 0 Then
    Return ($compressedSize / $originalSize) * 100.0
  Else
    Return 0.0
  Endif

End

' Obtiene el ahorro de espacio
Property Read SpaceSaving As Float

Function SpaceSaving_Read() As Float

  If $originalSize > 0 And $compressedSize > 0 Then
    Return ((($originalSize - $compressedSize) / $originalSize) * 100.0)
  Else
    Return 0.0
  Endif

End

' Obtiene las dimensiones como texto
Property Read Dimensions As String

Function Dimensions_Read() As String

  If $widthPixels > 0 And $heightPixels > 0 Then
    Return $widthPixels & " x " & $heightPixels
  Else
    Return "Desconocido"
  Endif

End

' Obtiene el tamaño original formateado
Property Read FormattedOriginalSize As String

Function FormattedOriginalSize_Read() As String

  Return FormatSize($originalSize)

End

' Obtiene el tamaño comprimido formateado
Property Read FormattedCompressedSize As String

Function FormattedCompressedSize_Read() As String

  Return FormatSize($compressedSize)

End

' Verifica si tiene foto comprimida
Property Read HasCompressedPhoto As Boolean

Function HasCompressedPhoto_Read() As Boolean

  Return $compressedPhoto <> Null And $compressedPhoto.Length > 0

End

' Verifica si tiene miniatura
Property Read HasThumbnail As Boolean

Function HasThumbnail_Read() As Boolean

  Return $thumbnail <> Null And $thumbnail.Length > 0

End

' === MÉTODOS DE UTILIDAD ===

' Formatea un tamaño en bytes a formato legible
Private Function FormatSize(sizeBytes As Long) As String

  Dim units As String[] = ["bytes", "KB", "MB", "GB"]
  Dim size As Float = sizeBytes
  Dim unitIndex As Integer = 0

  While size >= 1024 And unitIndex < (units.Max)
    size = size / 1024
    unitIndex += 1
  Wend

  If unitIndex = 0 Then
    Return CStr(sizeBytes) & " " & units[unitIndex]
  Else
    Return Format(size, "0.00") & " " & units[unitIndex]
  Endif

End

' Valida que el modelo tenga datos mínimos requeridos
Public Function IsValid() As Boolean

  ' Verificar campos obligatorios
  If $fileName = "" Then Return False
  If $md5Hash = "" Then Return False
  If $originalSize <= 0 Then Return False
  If $originalFormat = "" Then Return False

  ' Verificar que el hash MD5 tenga 32 caracteres
  If $md5Hash.Length <> 32 Then Return False

  ' Verificar que el formato sea válido
  If Not Constants.IsValidImage($originalFormat) Then Return False

  Return True

End

' Clona el modelo (copia profunda)
Public Function Clone() As PhotoModel

  Dim clonedPhoto As New PhotoModel

  ' Copiar todas las propiedades primitivas
  clonedPhoto.Id = $id
  clonedPhoto.FileName = $fileName
  clonedPhoto.MD5Hash = $md5Hash
  clonedPhoto.OriginalSize = $originalSize
  clonedPhoto.CompressedSize = $compressedSize
  clonedPhoto.WidthPixels = $widthPixels
  clonedPhoto.HeightPixels = $heightPixels
  clonedPhoto.OriginalFormat = $originalFormat
  clonedPhoto.CreationDate = $creationDate
  clonedPhoto.ImportDate = $importDate
  clonedPhoto.Description = $description
  clonedPhoto.IsFavorite = $isFavorite
  clonedPhoto.ImportUser = $importUser
  clonedPhoto.Active = $active
  clonedPhoto.CompressionLevel = $compressionLevel

  ' Copiar arrays de bytes si existen
  If $compressedPhoto Then
    clonedPhoto.$compressedPhoto = $compressedPhoto.Copy()
  Endif

  If $thumbnail Then
    clonedPhoto.$thumbnail = $thumbnail.Copy()
  Endif

  Return clonedPhoto

End

' Compara si dos modelos son equivalentes (sin incluir ID)
Public Function Equals(otherPhoto As PhotoModel) As Boolean

  If otherPhoto = Null Then Return False

  Return $md5Hash = otherPhoto.MD5Hash And
    $fileName = otherPhoto.FileName And
    $originalSize = otherPhoto.OriginalSize

End

' Obtiene una representación en texto del modelo
Public Function ToString() As String

  Dim info As String = "PhotoModel: "

  info &= "ID=" & $id & ", "
  info &= "File=" & $fileName & ", "
  info &= "Hash=" & Left($md5Hash, 8) & "..., "
  info &= "Size=" & $originalSize & ", "
  info &= "Dims=" & Me.Dimensions & ", "
  info &= "Format=" & UCase($originalFormat)

  Return info

End

' Limpia los datos binarios para liberar memoria
Public Sub ClearBinaryData()

  $compressedPhoto = Null
  $thumbnail = Null
  $compressedSize = 0

End

' Actualiza las dimensiones y formato desde una imagen
Public Sub UpdateFromImage(image As Image)

  If image Then
    $widthPixels = image.Width
    $heightPixels = image.Height
  Endif

End